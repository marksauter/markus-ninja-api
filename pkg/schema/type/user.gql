# Represents a user.
type User implements 
  Enrollable,
  Node,
  Searchable,
  UniformResourceLocatable 
{
  # Identifies the date and time when the user's account was last updated.
  accountUpdatedAt: Time!

  # Returns a list of activity associated with the user.
  activity(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for events returned from the connection.
    orderBy: EventOrder
  ): UserActivityConnection!

  # A list of appleables the user has appled.
  appled(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for appleables returned from the connection.
    orderBy: AppleableOrder

    # Query to search appleds by.
    search: String

    # The types of appleable items to retrieve.
    type: AppleableType!
  ): AppleableConnection!

  # Returns a list of assets that the user owns.
  assets(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Filtering options for user assets returned from the connection.
    filterBy: UserAssetFilters

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for assets returned from the connection.
    orderBy: UserAssetOrder
  ): UserAssetConnection!

  # The user's public profile bio.
  bio: String!

  # The user's public profile bio as HTML.
  bioHTML: HTML!

  # Identifies the date and time when the object was created.
  createdAt: Time!

  # A list of courses that the user owns.
  courses(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Filtering options for courses returned from the connection.
    filterBy: CourseFilters

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for courses returned from the connection.
    orderBy: CourseOrder
  ): CourseConnection!

  # The user's public profile email.
  email: Email

  # Returns a list of the user's emails.
  emails(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Filtering options for emails returned from the connection.
    filterBy: EmailFilters

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int
  ): EmailConnection!

  # A list of enrollables the user is enrolled in.
  enrolled(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for enrollables returned from the connection.
    orderBy: EnrollableOrder

    # Query to search enrolleds by.
    search: String

    # The types of enrollables to retrieve
    type: EnrollableType!
  ): EnrollableConnection!

  # The number of users that have enrolled in this enrollable.
  enrolleeCount: Int!

  # A list of users who have enrolled in this enrollable.
  enrollees(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Filtering options for users returned from the connection.
    filterBy: UserFilters

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for users returned from the connection.
    orderBy: EnrolleeOrder
  ): EnrolleeConnection!

  # Is the viewer dismissed, enrolled, or ignoring this enrollable.
  enrollmentStatus: EnrollmentStatus!

  id: ID!

  # Whether or not the user has verified their account.
  isVerified: Boolean!

  # Whether or not this user is a site administrator.
  isSiteAdmin: Boolean!

  # Whether or not this user is the viewing user.
  isViewer: Boolean!

  # Returns a list of lessons that the user owns.
  lessons(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Filtering options for lessons returned from the connection.
    filterBy: LessonFilters

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for lessons returned from the connection.
    orderBy: LessonOrder
  ): LessonConnection!

  # The username used to login.
  login: String!

  # The user's public profile name.
  name: String!

  # Returns a list of notifications for the user.
  notifications(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for notifications returned from the connection.
    orderBy: NotificationOrder
  ): NotificationConnection!

  # Identifies the date and time when the user's profile was last updated.
  profileUpdatedAt: Time!

  # Returns a list of activity that the user has received.
  receivedActivity(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for events returned from the connection.
    orderBy: EventOrder
  ): UserReceivedActivityConnection!

  # The HTTP path for this user.
  resourcePath: URI!

  # Find study by its name.
  study(
    # Name of study to find.
    name: String!
  ): Study

  # The number of studies that the user has created.
  studyCount: Int!

  # A list of studies that the user owns.
  studies(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Filtering options for studies returned from the connection.
    filterBy: StudyFilters

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for studies returned from the connection.
    orderBy: StudyOrder
  ): StudyConnection!

  # The HTTP URL for this user.
  url: URI!

  # Can the viewer enroll in this enrollable.
  viewerCanEnroll: Boolean!
}

# An edge type for User.
type UserEdge implements Edge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: User!
}

# A connection type for User.
type UserConnection implements Connection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # A list of nodes.
  nodes: [User]

  # The total count of items in the connection.
  totalCount: Int!
}
