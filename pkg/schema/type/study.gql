# Represents a study.
type Study implements
  Appleable,
  Createable,
  Enrollable,
  Node,
  Searchable,
  Topicable,
  UniformResourceLocatable
{
  # Identifies when the study was advanced at.
  advancedAt: Time

  # Returns a list users who have appled this appleable.
  appleGivers(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Order for connection.
    orderBy: AppleGiverOrder
  ): AppleGiverConnection!

  # Returns a single asset from the current study by name.
  asset(
    name: String!
  ): UserAsset

  # Returns a list of assets that the study owns.
  assets(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Filtering options for user assets returned from the connection.
    filterBy: UserAssetFilters

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for assets returned from the connection.
    orderBy: UserAssetOrder
  ): UserAssetConnection!

  # Returns a single course from the current study by number.
  course(
    # The number for the course to be returned.
    number: Int!  
  ): Course

  # Returns a list of courses from the current study.
  courses(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Filtering options for courses returned from the connection.
    filterBy: CourseFilters

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for courses returned from the connection.
    orderBy: CourseOrder
  ): CourseConnection!

  # Identifies the date and time when the object was created.
  createdAt: Time!

  # The description of the study.
  description: String!

  # The description of the study rendered to HTML.
  descriptionHTML: HTML!

  # The number of users that have enrolled in this enrollable.
  enrolleeCount: Int!

  # Returns a list users who have enrolled in this enrollable.
  enrollees(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Filtering options for users returned from the connection.
    filterBy: UserFilters

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Order for connection.
    orderBy: EnrolleeOrder
  ): EnrolleeConnection!

  # Is the viewer dismissed, enrolled, or ignoring this enrollable.
  enrollmentStatus: EnrollmentStatus!

  id: ID!

  # Is this study private?
  isPrivate: Boolean!

  # Returns a list of labels from the current study.
  labels(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Filtering options for labels returned from the connection.
    filterBy: LabelFilters

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int
  ): LabelConnection!

  # Returns a single lesson from the current study by number.
  lesson(
    # The number for the lesson to be returned.
    number: Int!  
  ): Lesson

  # How many lessons there are in this study.
  lessonCount: Int!

  # Returns a list of lessons from the current study.
  lessons(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Filtering options for lessons returned from the connection.
    filterBy: LessonFilters

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for lessons returned from the connection.
    orderBy: LessonOrder
  ): LessonConnection!

  # How many lesson comments there are in this study.
  lessonCommentCount: Int!

  lessonComments(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int
  ): LessonCommentConnection!

  # The name of the study.
  name: String!

  # The study's name with owner.
  nameWithOwner: String!

  # The owner of the study.
  owner: User!

  # The HTTP path for this study.
  resourcePath: URI!

  # Returns a list of topics from the current study.
  topics(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Filtering options for topics returned from the connection.
    filterBy: TopicFilters

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for topics returned from the connection.
    orderBy: TopicOrder
  ): TopicConnection!

  # Identifies when the study was last updated.
  updatedAt: Time!

  # The HTTP URL for this study.
  url: URI!

  # Can the viewer admin this object?
  viewerCanAdmin: Boolean!

  # Can the viewer apple this appleable.
  viewerCanApple: Boolean!

  # Can the viewer enroll in this enrollable.
  viewerCanEnroll: Boolean!

  # Has the viewer appled this appleable?
  viewerHasAppled: Boolean!
}

# An edge type for Study.
type StudyEdge implements Edge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Study
}

# A connection type for Study.
type StudyConnection implements Connection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [StudyEdge]

  # A list of nodes.
  nodes: [Study]

  # The total count of items in the connection.
  totalCount: Int!
}
