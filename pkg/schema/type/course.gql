# Represents a course.
type Course implements
  Appleable,
  Createable,
  Enrollable,
  Node,
  Searchable,
  StudyNode,
  Topicable,
  UniformResourceLocatable
{
  # Identifies when the course was advanced at.
  advancedAt: Time

  # Identifies when the course was completed at.
  completedAt: Time

  # Returns a list users who have appled this appleable.
  appleGivers(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Order for connection.
    orderBy: AppleGiverOrder
  ): AppleGiverConnection!

  # Identifies the date and time when the object was created.
  createdAt: Time!

  # The description of the course.
  description: String!

  # The description of the course rendered to HTML.
  descriptionHTML: HTML!

  # The number of users that have enrolled in this enrollable.
  enrolleeCount: Int!

  # Returns a list users who have enrolled in this enrollable.
  enrollees(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Order for connection.
    orderBy: EnrolleeOrder
  ): EnrolleeConnection!

  # Is the viewer dismissed, enrolled, or ignoring this enrollable.
  enrollmentStatus: EnrollmentStatus!

  id: ID!

  # Returns a single lesson from the current course by number.
  lesson(
    # The number for the lesson to be returned.
    number: Int!  
  ): Lesson

  # Returns a list of lessons from the current course.
  lessons(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for lessons returned from the connection.
    orderBy: LessonOrder
  ): LessonConnection!

  # How many lessons there are in this course.
  lessonCount: Int!

  # The name of the course.
  name: String!

  # Identifies the course number.
  number: Int!

  # The owner of the course.
  owner: User!

  # The HTTP path for this course.
  resourcePath: URI!

  # The status of the course.
  status: CourseStatus!

  # The study associated with this course.
  study: Study!

  # Returns a list of topics from the current course.
  topics(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for topics returned from the connection.
    orderBy: TopicOrder
  ): TopicConnection!

  # Identifies when the course was last updated.
  updatedAt: Time!

  # The HTTP URL for this course.
  url: URI!

  # Can the viewer admin this object?
  viewerCanAdmin: Boolean!

  # Can the viewer apple this appleable.
  viewerCanApple: Boolean!

  # Can the viewer enroll in this enrollable.
  viewerCanEnroll: Boolean!

  # Has the viewer appled this appleable?
  viewerHasAppled: Boolean!
}

# An edge type for Course.
type CourseEdge implements Edge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Course
}

# A connection type for Course.
type CourseConnection implements Connection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CourseEdge]

  # A list of nodes.
  nodes: [Course]

  # The total count of items in the connection.
  totalCount: Int!
}
