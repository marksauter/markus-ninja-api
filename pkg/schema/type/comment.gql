# Represents a comment.
type Comment implements 
  Deleteable,
  Labelable,
  LessonTimelineEvent,
  Node,
  Publishable,
  StudyNode,
  UniformResourceLocatable,
  Updateable,
  UserAssetTimelineEvent
{
  # The author of the comment.
  author: User

  # The body as Markdown.
  body: String!

  # The body rendered to HTML.
  bodyHTML: HTML!

  # The body rendered to text.
  bodyText: String!

  # The commentable associated with this comment.
  commentable: Commentable!

  # Identifies the date and time when the object was created.
  createdAt: Time!

  # The current draft of changes for the comment body as Markdown.
  draft: String!

  # Returns a single draft backup for the current comment by id (1-5).
  # The comment's draft is backed up—after an update—every two minutes.
  # There are at most 5 backups.
  draftBackup(
    # The ID of the backup.
    id: ID!
  ): CommentDraftBackup

  # Returns a list of draft backups for the current comment.
  # The comment's draft is backed up—after an update—every two minutes.
  # There are at most 5 backups.
  draftBackups: [CommentDraftBackup]!

  id: ID!

  # Is this comment published?
  isPublished: Boolean!

  # Returns a list of labels for the current comment.
  labels(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Filtering options for labels returned from the connection.
    filterBy: LabelFilters

    # Returns the first n elements form the list.
    first: Int

    # Returns the last n elements form the list.
    last: Int

    # Ordering options for labels returned from the connection.
    orderBy: LabelOrder
  ): LabelConnection!

  # Identifies when the comment draft was last edited.
  lastEditedAt: Time!

  # Identifies when the comment was published at.
  publishedAt: Time

  # The HTTP path for this comment.
  resourcePath: URI!

  # The study associated with this comment.
  study: Study!

  # Identifies the date and time when the object was last updated.
  updatedAt: Time!

  # The HTTP URL for this comment.
  url: URI!

  # Can the viewer delete this object.
  viewerCanDelete: Boolean!

  # Can the viewer update this object.
  viewerCanUpdate: Boolean!

  # Did the viewer author this comment.
  viewerDidAuthor: Boolean!
}

# An edge type for Comment.
type CommentEdge implements Edge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Comment
}

# A connection type for Comment.
type CommentConnection implements Connection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CommentEdge]

  # A list of nodes.
  nodes: [Comment]

  # The total count of items in the connection.
  totalCount: Int!
}
