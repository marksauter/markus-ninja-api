// Code generated by go-bindata.
// sources:
// input/createUser.gql
// interfaces/node.gql
// interfaces/uniform_resource_locatable.gql
// scalars/html.gql
// scalars/time.gql
// scalars/uri.gql
// schema.gql
// type/page_info.gql
// type/user.gql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _inputCreateuserGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xf0\xcc\x2b\x28\x2d\x51\x28\xa9\x2c\x48\x55\x48\xcb\x2f\x52\x70\x2e\x4a\x4d\x2c\x49\x0d\x2d\x4e\x2d\xe2\xca\x04\xcb\x20\x04\x20\x2a\xab\xb9\x14\x14\x52\x73\x13\x33\x73\xac\x14\x82\x4b\x8a\x32\xf3\xd2\x15\xb9\x14\x14\x72\xf2\xd3\x33\xf3\x90\x05\x0a\x12\x8b\x8b\xcb\xf3\x8b\x52\x10\x62\xb5\x5c\x80\x00\x00\x00\xff\xff\xd8\xd3\xc9\xe7\x6c\x00\x00\x00")

func inputCreateuserGqlBytes() ([]byte, error) {
	return bindataRead(
		_inputCreateuserGql,
		"input/createUser.gql",
	)
}

func inputCreateuserGql() (*asset, error) {
	bytes, err := inputCreateuserGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "input/createUser.gql", size: 108, mode: os.FileMode(420), modTime: time.Unix(1524840570, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _interfacesNodeGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2b\x49\x2d\x4a\x4b\x4c\x4e\x55\xf0\xcb\x4f\x49\x55\xa8\xe6\x52\x50\xc8\x4c\xb1\x52\xf0\x74\x51\xe4\xaa\xe5\x02\x04\x00\x00\xff\xff\x6f\x40\x52\x35\x1d\x00\x00\x00")

func interfacesNodeGqlBytes() ([]byte, error) {
	return bindataRead(
		_interfacesNodeGql,
		"interfaces/node.gql",
	)
}

func interfacesNodeGql() (*asset, error) {
	bytes, err := interfacesNodeGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "interfaces/node.gql", size: 29, mode: os.FileMode(420), modTime: time.Unix(1523374392, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _interfacesUniform_resource_locatableGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcb\x41\xaa\x83\x30\x14\x85\xe1\x79\x56\x71\x1e\xce\x5d\xc0\x5b\x41\x0b\x0e\x24\x98\x05\x5c\xd3\x23\x09\xd8\x44\x6e\xae\x05\x29\xdd\x7b\x27\x52\x28\x74\xf6\x0f\xfe\xaf\x83\xe7\xa6\x6c\x2c\xd6\x20\xb0\x63\x23\x2c\x89\x21\x4a\xc1\x4c\x28\x4d\x33\x1f\xbc\x61\x3e\x20\x08\x7e\xe8\x5d\x2e\x46\x5d\x24\x12\xa1\xe4\xa5\xea\xdd\xb3\xd5\x5d\x23\x87\x1a\xc5\x64\x5e\x89\xa7\x03\x3a\x4c\x89\xb8\x4c\xd3\x88\x4d\x2c\xc1\x2a\x2c\xe5\x06\x3d\xef\xde\xe1\xd3\xa3\x58\xfa\x47\xf0\xd7\x3f\xf7\x2d\x83\x1f\x7e\xc2\x5d\xd7\xf3\x7f\xb9\x77\x00\x00\x00\xff\xff\xe9\x60\xa2\xe7\xc4\x00\x00\x00")

func interfacesUniform_resource_locatableGqlBytes() ([]byte, error) {
	return bindataRead(
		_interfacesUniform_resource_locatableGql,
		"interfaces/uniform_resource_locatable.gql",
	)
}

func interfacesUniform_resource_locatableGql() (*asset, error) {
	bytes, err := interfacesUniform_resource_locatableGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "interfaces/uniform_resource_locatable.gql", size: 196, mode: os.FileMode(420), modTime: time.Unix(1523803810, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scalarsHtmlGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x70\x54\x28\x2e\x29\xca\xcc\x4b\x57\x48\xce\xcf\x2b\x49\xcc\xcc\x03\x31\x3d\x42\x7c\x7d\x14\x92\xf3\x53\x52\xf5\xb8\x8a\x93\x13\x73\x12\x8b\xc0\x22\x5c\x80\x00\x00\x00\xff\xff\x69\x83\x95\x22\x2d\x00\x00\x00")

func scalarsHtmlGqlBytes() ([]byte, error) {
	return bindataRead(
		_scalarsHtmlGql,
		"scalars/html.gql",
	)
}

func scalarsHtmlGql() (*asset, error) {
	bytes, err := scalarsHtmlGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scalars/html.gql", size: 45, mode: os.FileMode(420), modTime: time.Unix(1523745255, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scalarsTimeGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x08\xc9\xcc\x4d\x55\xc8\x2c\x56\x48\xcc\x53\x08\x72\x73\x36\x36\x36\xb6\x54\x28\xc9\xcc\x4d\x2d\x2e\x49\xcc\x2d\xd0\xe3\x2a\x4e\x4e\xcc\x49\x2c\x02\x2b\xe2\x02\x04\x00\x00\xff\xff\x3c\x59\x30\xf9\x2c\x00\x00\x00")

func scalarsTimeGqlBytes() ([]byte, error) {
	return bindataRead(
		_scalarsTimeGql,
		"scalars/time.gql",
	)
}

func scalarsTimeGql() (*asset, error) {
	bytes, err := scalarsTimeGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scalars/time.gql", size: 44, mode: os.FileMode(420), modTime: time.Unix(1523805330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scalarsUriGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x70\xcc\x53\x08\x72\x73\x56\x30\xb6\xb4\x30\xd3\x81\xb1\xcc\x75\x14\x12\xf3\x52\xc0\x3c\x33\x53\x73\x03\x05\x8d\x9c\xd4\xb2\xd4\x1c\x05\x13\x4d\x85\xe4\xfc\xdc\x82\x9c\xcc\xc4\xbc\x12\x85\xd0\x20\x4f\x85\xe2\x92\xa2\xcc\xbc\x74\x3d\xae\xe2\xe4\xc4\x9c\xc4\x22\x90\x10\x17\x20\x00\x00\xff\xff\x12\xa3\x29\x58\x51\x00\x00\x00")

func scalarsUriGqlBytes() ([]byte, error) {
	return bindataRead(
		_scalarsUriGql,
		"scalars/uri.gql",
	)
}

func scalarsUriGql() (*asset, error) {
	bytes, err := scalarsUriGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scalars/uri.gql", size: 81, mode: os.FileMode(420), modTime: time.Unix(1523745591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\xbb\xaa\xc3\x30\x0c\x86\x77\x3f\xc5\xef\xcd\xe7\x15\xb4\x9e\x2c\x19\xce\x81\x52\x3a\x85\x0c\x21\x16\xa9\xa0\xb1\x53\x5f\x5a\x42\xc9\xbb\x17\xe7\x36\x49\xfa\x3f\x49\x5f\xec\xef\x3c\x76\xf8\x28\xe0\x99\x39\xcc\x84\x4b\x29\x0a\x18\x73\xea\x92\x78\x47\xf8\xdb\x3b\xb5\xa8\x34\x4f\xbc\x6d\xac\x27\xce\x5b\x36\x62\x09\x75\xa5\x7f\x08\xff\xde\xf2\x9e\x46\x23\x36\x12\x9a\xba\xd2\x6d\x41\x4d\x61\xad\x56\x40\x8e\x1c\xcc\xc3\x0f\xe2\x08\xd7\x14\xc4\x0d\x85\xdf\x22\x07\x05\xbc\x84\xdf\x1c\xb6\x51\x1f\xbe\xc3\xbf\x2a\xfb\xc0\x5d\xe2\xc2\x8d\xb8\x29\x27\xc2\xef\x99\xd4\x25\x38\xbf\x2d\xea\x1b\x00\x00\xff\xff\xc0\x3e\x66\x68\xdd\x00\x00\x00")

func schemaGqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGql,
		"schema.gql",
	)
}

func schemaGql() (*asset, error) {
	bytes, err := schemaGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.gql", size: 221, mode: os.FileMode(420), modTime: time.Unix(1524840581, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typePage_infoGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xbd\x4a\xc7\x40\x10\x04\xf0\xfe\x9e\x62\xe4\xdf\x4a\x1e\x20\x8d\xa0\x95\x8d\x04\x2c\xac\x37\x97\xcd\xdd\xa1\xd9\x0d\x7b\x7b\x7e\x20\xbe\xbb\x9c\x82\x82\x44\xc4\x72\x77\x98\x1f\xcc\x09\xd7\xb2\xaa\x6d\xe4\x45\x05\x34\x6b\x73\xec\x94\x8a\x7c\x3e\x8a\x80\x10\x55\x84\x63\xbf\x87\xe0\x2f\x3b\x63\xa2\xc4\xbd\x86\xd7\x00\x9c\x70\x97\x59\xbe\x4a\x92\xb0\xaa\x3d\x91\x2d\xf5\x1c\x64\x0c\xcf\x6c\x8c\x4d\x8d\x51\x9c\xb7\x7a\x11\x80\x4c\xf5\x86\x9f\xbd\x3b\x23\x2e\x55\x1f\x98\xe4\x2c\x1c\x62\x33\xc5\xfb\xbf\xb5\xc9\xf8\xb1\x68\xab\xff\x14\x3d\x33\x62\xb3\xaa\x06\xd7\xbe\xd3\x8b\x34\x1e\x02\x50\x9d\xcc\xaf\x3e\xa2\x11\xb7\x6e\x45\xd2\xb1\xf6\x3d\xf6\x77\x8c\x65\xf9\x41\xbd\x85\xf7\x00\x00\x00\xff\xff\x92\xd2\xc8\xaf\x79\x01\x00\x00")

func typePage_infoGqlBytes() ([]byte, error) {
	return bindataRead(
		_typePage_infoGql,
		"type/page_info.gql",
	)
}

func typePage_infoGql() (*asset, error) {
	bytes, err := typePage_infoGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/page_info.gql", size: 377, mode: os.FileMode(420), modTime: time.Unix(1523742707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUserGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4f\x6b\x14\x41\x10\xc5\xef\xf3\x29\x9e\xe4\xe0\x45\xf2\x01\xe6\x16\x51\xc8\xc2\x2a\x61\x33\xab\xe7\xde\xe9\xda\x9d\x92\xfe\x47\x75\x8d\x4b\x10\xbf\xbb\x54\xa7\xa3\x68\xc4\x2c\x9e\xfa\x51\x33\xef\xd7\xaf\xaa\xeb\x0a\x3b\x2a\x42\x95\x92\x56\x38\xac\x95\xe4\x7a\xd0\x87\x42\xd8\x57\x12\x70\x2c\x81\x62\xfb\xf8\x31\x7b\x7a\x83\x7d\xe2\x63\x96\xb8\xa3\x9a\x57\x99\x69\x9b\x67\xa7\xee\x10\x08\xdf\x06\xe0\x0a\xd3\x42\x8d\xf1\xba\xa2\xac\x87\xc0\x33\x8a\xe4\x23\x07\xc2\x81\xf3\xf5\x00\x3b\x46\xdc\xab\x70\x3a\xbd\x1a\x5e\xb6\xc0\x55\xdc\x4e\x1f\xb6\xdd\x6a\x72\x6c\x85\x6e\xde\x78\x4a\xca\x47\xa6\x0a\x5d\x08\xde\x29\xc1\x25\x0f\xe5\x48\x38\x2f\x94\x5a\x39\x1f\xbe\xd0\xac\x38\xbb\x8a\x59\xc8\x29\x79\xe3\x75\x79\xa3\x23\x26\x8e\xf4\x62\x1c\x8a\x8e\x83\x19\x9b\xf8\xad\x0b\xf6\x23\x36\xef\x3a\xe1\xf3\x42\xba\x90\x20\x0b\x52\x56\xe8\xc2\xb5\x11\xc1\x36\xe1\xca\x16\xd1\x47\x4e\x5c\x55\x9c\x66\x31\x24\xd7\x7b\x56\xba\xb1\xf2\x88\xb7\x39\x07\x72\xe9\x02\x9c\x35\xf7\x95\xe9\xcc\xe9\xd4\x9f\xce\x50\x9f\x98\xce\x24\x7f\x72\x9e\x1a\x4b\x2e\x36\xe1\xa1\x19\x21\x9f\x38\x99\xab\x89\x8b\x5f\xc6\x18\xe6\xb2\xf3\x1f\x26\xe1\xe8\xe4\xe1\x71\x5e\x3f\xaf\xac\x7c\x4a\x58\x8b\xd9\xfb\x0f\xef\x9f\xcd\xf3\x11\x73\x3b\x4d\x77\x28\x4e\x17\x1c\xb3\xfc\x6a\xdc\x9c\xd2\xf7\xef\xce\xe9\x32\x62\xbf\xdb\xfc\xef\x3e\x04\x57\x15\x6b\xf1\x4f\x4b\xd1\xe5\x5f\x96\xa2\xa5\xd9\xef\xb6\xcf\xc3\xac\x12\x7a\x86\xef\xc3\x8f\x00\x00\x00\xff\xff\xe1\x8e\xa5\x88\x50\x03\x00\x00")

func typeUserGqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUserGql,
		"type/user.gql",
	)
}

func typeUserGql() (*asset, error) {
	bytes, err := typeUserGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/user.gql", size: 848, mode: os.FileMode(420), modTime: time.Unix(1524755416, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"input/createUser.gql": inputCreateuserGql,
	"interfaces/node.gql": interfacesNodeGql,
	"interfaces/uniform_resource_locatable.gql": interfacesUniform_resource_locatableGql,
	"scalars/html.gql": scalarsHtmlGql,
	"scalars/time.gql": scalarsTimeGql,
	"scalars/uri.gql": scalarsUriGql,
	"schema.gql": schemaGql,
	"type/page_info.gql": typePage_infoGql,
	"type/user.gql": typeUserGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"input": &bintree{nil, map[string]*bintree{
		"createUser.gql": &bintree{inputCreateuserGql, map[string]*bintree{}},
	}},
	"interfaces": &bintree{nil, map[string]*bintree{
		"node.gql": &bintree{interfacesNodeGql, map[string]*bintree{}},
		"uniform_resource_locatable.gql": &bintree{interfacesUniform_resource_locatableGql, map[string]*bintree{}},
	}},
	"scalars": &bintree{nil, map[string]*bintree{
		"html.gql": &bintree{scalarsHtmlGql, map[string]*bintree{}},
		"time.gql": &bintree{scalarsTimeGql, map[string]*bintree{}},
		"uri.gql": &bintree{scalarsUriGql, map[string]*bintree{}},
	}},
	"schema.gql": &bintree{schemaGql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"page_info.gql": &bintree{typePage_infoGql, map[string]*bintree{}},
		"user.gql": &bintree{typeUserGql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

