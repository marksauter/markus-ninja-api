// Code generated by go-bindata.
// sources:
// enums/lesson_order_field.gql
// enums/order_direction.gql
// enums/study_order_field.gql
// input/createLesson.gql
// input/createStudy.gql
// input/createUser.gql
// input/deleteLesson.gql
// input/deleteStudy.gql
// input/deleteUser.gql
// input/lesson_order.gql
// input/updateLesson.gql
// input/updateStudy.gql
// input/updateUser.gql
// interfaces/connection.gql
// interfaces/deletable.gql
// interfaces/edge.gql
// interfaces/node.gql
// interfaces/study_node.gql
// interfaces/uniform_resource_locatable.gql
// interfaces/updateable.gql
// scalars/html.gql
// scalars/time.gql
// scalars/uri.gql
// schema.gql
// type/lesson.gql
// type/page_info.gql
// type/study.gql
// type/user.gql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumsLesson_order_fieldGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcc\x4d\x0a\x83\x30\x18\x84\xe1\x7d\x4e\x31\xe0\xde\x3b\xd8\x6a\x57\xfd\x11\xd1\x75\xd1\x64\xc0\x80\x7e\x91\x24\x52\x4a\xe9\xdd\x8b\xa1\xed\xaa\xdd\x0e\xef\x3c\x19\x6a\xef\x16\xfa\x68\x19\x30\xdc\x71\x1b\xad\x1e\x31\x31\x04\x27\xd0\x4e\x84\x3a\x5a\x27\x01\xba\x17\x0c\x84\xf3\x86\x9e\x26\x57\x94\x75\xc6\x31\x75\x97\x6d\x3b\x58\x4e\x06\x0f\x05\x64\x48\xc3\x1b\x49\xaa\xf6\xec\x37\x06\xd1\xce\xcc\x15\xb0\x6f\xaa\xa2\xad\xca\x6b\xd1\xaa\xdf\x0f\x59\xe7\x81\x7e\x4b\xcf\xdd\x69\x57\x35\x7f\xb2\x75\x31\x7d\xe4\x97\xed\xea\xf2\xc3\x3e\xd5\x2b\x00\x00\xff\xff\xab\x71\x4b\xbf\xdb\x00\x00\x00")

func enumsLesson_order_fieldGqlBytes() ([]byte, error) {
	return bindataRead(
		_enumsLesson_order_fieldGql,
		"enums/lesson_order_field.gql",
	)
}

func enumsLesson_order_fieldGql() (*asset, error) {
	bytes, err := enumsLesson_order_fieldGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enums/lesson_order_field.gql", size: 219, mode: os.FileMode(420), modTime: time.Unix(1525890308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _enumsOrder_directionGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcd\x31\x8e\x83\x40\x0c\x85\xe1\xde\xa7\x78\x12\xfd\xde\x61\x17\xb6\x4e\x24\x4e\x30\x99\x31\x60\x09\x6c\x34\x1e\x40\x51\x94\xbb\x47\x28\x09\x45\xba\xb4\x96\xdf\xf7\x57\x38\x9b\xbb\x5c\x46\x46\x92\xcc\xb1\x88\xa9\x43\x14\xdb\x20\x71\x40\x31\x58\x4e\x9c\x11\x30\x8a\x17\x58\x07\x29\x3c\x39\xb6\x81\x15\x73\xb6\x55\x12\x27\x04\x7d\xbe\xfd\x5d\xa9\x42\xc8\xfd\x32\xb1\x16\x62\x5d\x26\x9c\xf6\x7b\xf3\xa6\x71\x23\xa0\x42\x3b\x73\x94\x4e\xd8\xf7\x65\xf0\xc8\x9a\x44\xfb\x57\xaa\xb3\x3d\xd7\xcb\xca\x87\x7a\x98\x3f\x04\xfc\xb6\x35\x7d\x2a\x48\xfc\xa5\xd2\xfc\xb7\x35\xdd\xe9\x11\x00\x00\xff\xff\xad\x7c\xcb\xda\x00\x01\x00\x00")

func enumsOrder_directionGqlBytes() ([]byte, error) {
	return bindataRead(
		_enumsOrder_directionGql,
		"enums/order_direction.gql",
	)
}

func enumsOrder_directionGql() (*asset, error) {
	bytes, err := enumsOrder_directionGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enums/order_direction.gql", size: 256, mode: os.FileMode(420), modTime: time.Unix(1525882838, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _enumsStudy_order_fieldGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x4d\x0e\x82\x30\x10\x46\xf7\x3d\xc5\x97\xb0\xe7\x0e\x0d\xe0\x4e\x24\x8a\x6e\x4d\xe9\x4c\x42\x13\x99\x92\x52\x34\xc4\x78\x77\x03\xfe\x6d\xd4\xed\x97\xf7\xde\x4c\x82\x2a\xf8\x9e\x43\x74\x3c\xa0\x99\x70\x69\x9d\x6d\x31\xc4\x91\x26\x58\x2f\xc2\x36\x3a\x2f\x03\xac\x11\x34\x0c\x1f\x88\x03\x53\xaa\x58\xc6\x0e\xbb\x19\xdb\xcc\xd3\xca\xf1\x89\x70\x55\x40\x82\x65\x58\x12\xcf\xa6\xa1\xb3\x11\xcb\x88\xae\xe3\x54\x01\x3a\x3f\xe8\x32\x2b\xf2\xa3\xae\xd5\x77\xc3\x06\x36\xf3\xdd\xb7\x92\x6d\x0b\x5d\xff\x33\xc4\x3c\xc0\x52\xaf\x8b\x1f\xc8\xd8\x93\x89\x9f\x2f\xf6\x55\xfe\x4a\xde\xd4\x3d\x00\x00\xff\xff\xf4\xfc\xdd\x91\x07\x01\x00\x00")

func enumsStudy_order_fieldGqlBytes() ([]byte, error) {
	return bindataRead(
		_enumsStudy_order_fieldGql,
		"enums/study_order_field.gql",
	)
}

func enumsStudy_order_fieldGql() (*asset, error) {
	bytes, err := enumsStudy_order_fieldGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enums/study_order_field.gql", size: 263, mode: os.FileMode(420), modTime: time.Unix(1525882977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _inputCreatelessonGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xf0\xcc\x2b\x28\x2d\x51\x28\xa9\x2c\x48\x55\x48\xcb\x2f\x52\x70\x2e\x4a\x4d\x2c\x49\xf5\x49\x2d\x2e\xce\xcf\xd3\xe3\xca\x04\x4b\x22\x8b\x41\x94\x57\x73\x29\x28\x24\xe5\xa7\x54\x5a\x29\x80\x40\x70\x49\x51\x66\x5e\x3a\x97\x82\x42\x71\x49\x69\x4a\xa5\x67\x8a\x95\x82\x82\xa7\x8b\x22\x97\x82\x42\x49\x66\x49\x4e\xaa\x15\x42\x89\x22\x57\x2d\x17\x20\x00\x00\xff\xff\xae\x5e\x3b\xfc\x72\x00\x00\x00")

func inputCreatelessonGqlBytes() ([]byte, error) {
	return bindataRead(
		_inputCreatelessonGql,
		"input/createLesson.gql",
	)
}

func inputCreatelessonGql() (*asset, error) {
	bytes, err := inputCreatelessonGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "input/createLesson.gql", size: 114, mode: os.FileMode(420), modTime: time.Unix(1525788725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _inputCreatestudyGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xf0\xcc\x2b\x28\x2d\x51\x28\xa9\x2c\x48\x55\x48\xcb\x2f\x52\x70\x2e\x4a\x4d\x2c\x49\x0d\x2e\x29\x4d\xa9\xd4\xe3\xca\x04\xcb\x21\x09\x41\x14\x57\x73\x29\x28\xa4\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x59\x29\x28\x04\x97\x14\x65\xe6\xa5\x73\x29\x28\xe4\x25\xe6\xa6\x5a\x29\xc0\x00\x44\x58\x91\xab\x96\x0b\x10\x00\x00\xff\xff\x74\x2b\x3e\x91\x68\x00\x00\x00")

func inputCreatestudyGqlBytes() ([]byte, error) {
	return bindataRead(
		_inputCreatestudyGql,
		"input/createStudy.gql",
	)
}

func inputCreatestudyGql() (*asset, error) {
	bytes, err := inputCreatestudyGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "input/createStudy.gql", size: 104, mode: os.FileMode(420), modTime: time.Unix(1525796319, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _inputCreateuserGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xf0\xcc\x2b\x28\x2d\x51\x28\xa9\x2c\x48\x55\x48\xcb\x2f\x52\x70\x2e\x4a\x4d\x2c\x49\x0d\x2d\x4e\x2d\xd2\xe3\xca\x04\x4b\x21\x44\x20\x4a\xab\xb9\x14\x14\x52\x73\x13\x33\x73\xac\x14\x40\x20\xb8\xa4\x28\x33\x2f\x5d\x91\x4b\x41\x21\x27\x3f\x3d\x33\x0f\x5d\xb0\x20\xb1\xb8\xb8\x3c\xbf\x28\xc5\x0a\x21\x58\xcb\x05\x08\x00\x00\xff\xff\x39\x13\x48\x49\x76\x00\x00\x00")

func inputCreateuserGqlBytes() ([]byte, error) {
	return bindataRead(
		_inputCreateuserGql,
		"input/createUser.gql",
	)
}

func inputCreateuserGql() (*asset, error) {
	bytes, err := inputCreateuserGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "input/createUser.gql", size: 118, mode: os.FileMode(420), modTime: time.Unix(1525788715, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _inputDeletelessonGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xf0\xcc\x2b\x28\x2d\x51\x28\xa9\x2c\x48\x55\x48\xcb\x2f\x52\x70\x49\xcd\x49\x2d\x49\xf5\x49\x2d\x2e\xce\xcf\xd3\xe3\xca\x04\x4b\x22\x8b\x41\x94\x57\x73\x29\x28\xe4\x40\xf8\x29\x56\x0a\x9e\x2e\x8a\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\xfe\x57\x79\x43\x4b\x00\x00\x00")

func inputDeletelessonGqlBytes() ([]byte, error) {
	return bindataRead(
		_inputDeletelessonGql,
		"input/deleteLesson.gql",
	)
}

func inputDeletelessonGql() (*asset, error) {
	bytes, err := inputDeletelessonGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "input/deleteLesson.gql", size: 75, mode: os.FileMode(420), modTime: time.Unix(1525788731, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _inputDeletestudyGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xf0\xcc\x2b\x28\x2d\x51\x28\xa9\x2c\x48\x55\x48\xcb\x2f\x52\x70\x49\xcd\x49\x2d\x49\x0d\x2e\x29\x4d\xa9\xd4\xe3\xca\x04\xcb\x21\x09\x41\x14\x57\x73\x29\x28\x14\x83\xb9\x29\x56\x0a\x9e\x2e\x8a\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\x05\x0c\x8f\x92\x48\x00\x00\x00")

func inputDeletestudyGqlBytes() ([]byte, error) {
	return bindataRead(
		_inputDeletestudyGql,
		"input/deleteStudy.gql",
	)
}

func inputDeletestudyGql() (*asset, error) {
	bytes, err := inputDeletestudyGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "input/deleteStudy.gql", size: 72, mode: os.FileMode(420), modTime: time.Unix(1525788734, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _inputDeleteuserGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xf0\xcc\x2b\x28\x2d\x51\x28\xa9\x2c\x48\x55\x48\xcb\x2f\x52\x70\x49\xcd\x49\x2d\x49\x0d\x2d\x4e\x2d\xd2\xe3\xca\x04\x4b\x21\x44\x20\x4a\xab\xb9\x14\x14\x4a\x41\xbc\x14\x2b\x05\x4f\x17\x45\xae\x5a\x2e\x40\x00\x00\x00\xff\xff\x3b\x26\xa7\x97\x45\x00\x00\x00")

func inputDeleteuserGqlBytes() ([]byte, error) {
	return bindataRead(
		_inputDeleteuserGql,
		"input/deleteUser.gql",
	)
}

func inputDeleteuserGql() (*asset, error) {
	bytes, err := inputDeleteuserGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "input/deleteUser.gql", size: 69, mode: os.FileMode(420), modTime: time.Unix(1525788737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _inputLesson_orderGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xbf\x0a\xc2\x30\x10\xc7\xf1\xfd\x9e\xe2\x57\xba\xf7\x01\x3a\x8b\x93\xe0\x22\x38\xb7\xc9\x95\x1c\x94\x4b\xc8\x1f\xa4\x88\xef\x2e\x89\xd8\x3a\x39\x26\x7c\xef\x73\xd7\xe3\x3e\x6d\x09\xa2\x78\x38\x31\x0e\x2b\xa7\xe4\x35\xc1\x4c\x8a\x99\xe1\xa3\xe5\xc8\x16\x25\x78\x45\xe4\x5c\xa2\x0e\x24\x1a\x4a\xc6\xa5\x95\xd7\x1a\xe0\x49\x40\x8f\x9b\x63\x58\x89\x6c\xb2\x78\x3d\xc8\xec\x3f\xcc\x6e\xcf\x1b\xb2\x63\xa4\xc0\x46\x16\x61\x8b\x45\x78\xb5\x03\xe1\x98\x1e\xd1\xe0\xd3\xf7\xdd\xd1\xbe\xa1\xc5\x7f\xf5\x2a\xb5\x6a\xfc\x3d\xf2\x5c\x7f\x3a\x7a\xd1\x3b\x00\x00\xff\xff\xa8\xf8\x45\x7f\xf3\x00\x00\x00")

func inputLesson_orderGqlBytes() ([]byte, error) {
	return bindataRead(
		_inputLesson_orderGql,
		"input/lesson_order.gql",
	)
}

func inputLesson_orderGql() (*asset, error) {
	bytes, err := inputLesson_orderGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "input/lesson_order.gql", size: 243, mode: os.FileMode(420), modTime: time.Unix(1525960901, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _inputUpdatelessonGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\x31\x0a\x03\x21\x14\x04\xd0\xfe\x9f\x62\x42\xfa\x1c\xc0\x3a\x8d\x90\x2e\xe4\x00\x11\xff\x2e\x82\xfb\x15\xfd\x16\xb2\xec\xdd\x17\xb4\x71\xca\x99\x37\x4f\x58\xc9\x4d\xa1\x3d\x33\xb6\x54\xf0\xcb\xfe\xaf\xfc\xe1\x5a\x93\xbc\x28\x8c\x71\xed\x26\x3f\x09\x70\xc9\x77\x83\x91\xaf\x96\x20\x3b\x01\x71\x1a\x6f\x00\xfb\x7e\x10\x20\xed\x70\x5c\x06\xb3\xa2\x04\x68\xd0\xc8\x66\x7d\x5d\x74\x07\x00\x00\xff\xff\x0a\xa2\xe4\xfa\x85\x00\x00\x00")

func inputUpdatelessonGqlBytes() ([]byte, error) {
	return bindataRead(
		_inputUpdatelessonGql,
		"input/updateLesson.gql",
	)
}

func inputUpdatelessonGql() (*asset, error) {
	bytes, err := inputUpdatelessonGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "input/updateLesson.gql", size: 133, mode: os.FileMode(420), modTime: time.Unix(1525788746, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _inputUpdatestudyGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xf0\xcc\x2b\x28\x2d\x51\x28\xa9\x2c\x48\x55\x48\xcb\x2f\x52\x08\x2d\x48\x49\x2c\x49\x0d\x2e\x29\x4d\xa9\xd4\xe3\xca\x04\xcb\x21\x09\x41\x14\x57\x73\x29\x28\xa4\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x59\x29\x28\x04\x97\x14\x65\xe6\xa5\x73\x29\x28\x14\x83\x55\xa5\x58\x29\x80\x81\xa7\x8b\x22\x57\x2d\x17\x20\x00\x00\xff\xff\x90\xd8\x0c\xbd\x64\x00\x00\x00")

func inputUpdatestudyGqlBytes() ([]byte, error) {
	return bindataRead(
		_inputUpdatestudyGql,
		"input/updateStudy.gql",
	)
}

func inputUpdatestudyGql() (*asset, error) {
	bytes, err := inputUpdatestudyGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "input/updateStudy.gql", size: 100, mode: os.FileMode(420), modTime: time.Unix(1525788873, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _inputUpdateuserGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xf0\xcc\x2b\x28\x2d\x51\x28\xa9\x2c\x48\x55\x48\xcb\x2f\x52\x08\x2d\x48\x49\x2c\x49\x0d\x2d\x4e\x2d\xd2\xe3\xca\x04\x4b\x21\x44\x20\x4a\xab\xb9\x14\x14\x92\x32\xf3\xad\x14\x40\x20\xb8\xa4\x28\x33\x2f\x9d\x4b\x41\xa1\x14\x24\x9f\x62\xa5\xa0\xe0\xe9\xa2\xc8\xa5\xa0\x90\x93\x9f\x9e\x99\x67\x85\xac\x20\x2f\x31\x37\xd5\x0a\x49\x4b\x2d\x17\x20\x00\x00\xff\xff\xd0\x54\xf5\x43\x7c\x00\x00\x00")

func inputUpdateuserGqlBytes() ([]byte, error) {
	return bindataRead(
		_inputUpdateuserGql,
		"input/updateUser.gql",
	)
}

func inputUpdateuserGql() (*asset, error) {
	bytes, err := inputUpdateuserGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "input/updateUser.gql", size: 124, mode: os.FileMode(420), modTime: time.Unix(1525788751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _interfacesConnectionGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcf\xb1\x8e\x83\x30\x0c\x06\xe0\x3d\x4f\xf1\x23\x76\x1e\x20\x1b\x42\x37\xb0\x9c\x6e\xb8\x0d\xdd\x10\x25\x06\x2c\x81\x7d\x02\x77\xaa\xfa\xee\x55\xd2\x16\xaa\x6e\x7f\xa2\xcf\xc9\xef\x1a\x2d\xa2\x8a\x50\x34\x56\x81\x29\x02\x16\xde\x0d\x3a\x82\x8d\xd6\xbd\x71\x2c\x46\xdb\x18\x22\xa1\x3b\xe1\xd5\x01\x35\x7a\x19\x75\x5b\xc3\x31\xca\x09\x2c\xf8\x0f\x13\x4b\xb9\x6c\x1c\xf2\x89\xb2\xf3\xf8\x79\xa6\xca\x95\xe1\xf6\xf8\x88\xd2\x44\x7b\xb6\x25\x78\x0c\x5f\x69\xa2\xbf\x4f\x25\x9a\x1e\xaa\x04\x8f\xe1\x5b\xd3\x4b\xfd\xce\x04\x53\x0b\x0b\xa2\x5e\xe4\x6c\x9f\xeb\xd8\x4c\x6f\x2b\xe6\x07\x8a\xec\x32\xf4\xe8\xc5\x2a\x77\x73\xf7\x00\x00\x00\xff\xff\x35\x58\xb8\x38\x08\x01\x00\x00")

func interfacesConnectionGqlBytes() ([]byte, error) {
	return bindataRead(
		_interfacesConnectionGql,
		"interfaces/connection.gql",
	)
}

func interfacesConnectionGql() (*asset, error) {
	bytes, err := interfacesConnectionGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "interfaces/connection.gql", size: 264, mode: os.FileMode(420), modTime: time.Unix(1525875669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _interfacesDeletableGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x41\x0a\xc2\x40\x10\x44\xd1\x7d\x9f\xa2\x24\xfb\x1c\xc0\xa5\xd1\x83\xf4\x4c\x4a\xa6\x65\xe8\x81\xa4\xd0\x85\x78\x77\x51\xb2\xfd\x9f\x37\xe1\x96\x0a\x05\x77\xa8\xb9\x50\x3d\x51\x88\x95\x9d\xe2\x3a\x5b\xa4\xb8\xdd\xbd\x12\xd7\x5f\xf2\xd2\x89\xb7\x01\x13\x16\x4f\xa8\x11\xcf\xe0\x8b\xdb\x21\xa0\x16\x3b\x46\x79\xb0\x6a\x36\x1c\x73\xf1\xfc\x6b\x9e\x71\x19\xa3\xd3\xf3\x64\x1f\xfb\x06\x00\x00\xff\xff\x0a\xa9\x35\xe6\x7b\x00\x00\x00")

func interfacesDeletableGqlBytes() ([]byte, error) {
	return bindataRead(
		_interfacesDeletableGql,
		"interfaces/deletable.gql",
	)
}

func interfacesDeletableGql() (*asset, error) {
	bytes, err := interfacesDeletableGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "interfaces/deletable.gql", size: 123, mode: os.FileMode(420), modTime: time.Unix(1525789508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _interfacesEdgeGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\x0e\xc2\x30\x10\x44\xd1\xde\xa7\x18\x94\x9e\x03\xa4\x4b\x41\x4b\x03\x17\xb0\xec\x89\xb3\x05\xb3\xc8\xd9\x54\x88\xbb\xa3\x24\x74\x5f\xfa\x7a\x03\x26\x81\xb5\x11\x26\x64\x14\x97\x58\xc2\x5c\xd7\x64\x0a\xf6\x39\x17\xe2\xb6\xff\x4f\x02\x06\x4c\x28\x5b\x5f\xbd\x63\xf6\x8e\x6d\x3d\xd8\x3b\x37\x53\x3e\x11\xfe\x7f\xc4\x23\xba\xa9\x5d\xd2\xc1\x9e\x0b\x61\xc1\x17\x72\x20\x16\x82\xaa\xf0\xf9\xcc\xda\xb8\x3b\x79\xe5\x88\xbb\x57\xa6\x6f\xfa\x05\x00\x00\xff\xff\xe8\x50\x6e\xbb\x97\x00\x00\x00")

func interfacesEdgeGqlBytes() ([]byte, error) {
	return bindataRead(
		_interfacesEdgeGql,
		"interfaces/edge.gql",
	)
}

func interfacesEdgeGql() (*asset, error) {
	bytes, err := interfacesEdgeGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "interfaces/edge.gql", size: 151, mode: os.FileMode(420), modTime: time.Unix(1525875581, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _interfacesNodeGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2b\x49\x2d\x4a\x4b\x4c\x4e\x55\xf0\xcb\x4f\x49\x55\xa8\xe6\x52\x50\xc8\x4c\xb1\x52\xf0\x74\x51\xe4\xaa\xe5\x02\x04\x00\x00\xff\xff\x6f\x40\x52\x35\x1d\x00\x00\x00")

func interfacesNodeGqlBytes() ([]byte, error) {
	return bindataRead(
		_interfacesNodeGql,
		"interfaces/node.gql",
	)
}

func interfacesNodeGql() (*asset, error) {
	bytes, err := interfacesNodeGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "interfaces/node.gql", size: 29, mode: os.FileMode(420), modTime: time.Unix(1523374392, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _interfacesStudy_nodeGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2b\x49\x2d\x4a\x4b\x4c\x4e\x55\x08\x2e\x29\x4d\xa9\xf4\xcb\x4f\x49\x55\xa8\xe6\x52\x50\x50\x56\x08\xc9\x48\x55\x28\x06\x89\x29\x24\x16\x17\xe7\x27\x67\x26\x96\xa4\xa6\x28\x94\x67\x96\x64\x28\x94\x64\x64\x16\x2b\xe4\xe5\xa7\xa4\xea\x71\x29\x40\x94\x58\x41\x74\x2b\x72\xd5\x72\x01\x02\x00\x00\xff\xff\xdd\x43\xe1\x5f\x51\x00\x00\x00")

func interfacesStudy_nodeGqlBytes() ([]byte, error) {
	return bindataRead(
		_interfacesStudy_nodeGql,
		"interfaces/study_node.gql",
	)
}

func interfacesStudy_nodeGql() (*asset, error) {
	bytes, err := interfacesStudy_nodeGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "interfaces/study_node.gql", size: 81, mode: os.FileMode(420), modTime: time.Unix(1525789404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _interfacesUniform_resource_locatableGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcb\x41\xaa\x83\x30\x14\x85\xe1\x79\x56\x71\x1e\xce\x5d\xc0\x5b\x41\x0b\x0e\x24\x98\x05\x5c\xd3\x23\x09\xd8\x44\x6e\xae\x05\x29\xdd\x7b\x27\x52\x28\x74\xf6\x0f\xfe\xaf\x83\xe7\xa6\x6c\x2c\xd6\x20\xb0\x63\x23\x2c\x89\x21\x4a\xc1\x4c\x28\x4d\x33\x1f\xbc\x61\x3e\x20\x08\x7e\xe8\x5d\x2e\x46\x5d\x24\x12\xa1\xe4\xa5\xea\xdd\xb3\xd5\x5d\x23\x87\x1a\xc5\x64\x5e\x89\xa7\x03\x3a\x4c\x89\xb8\x4c\xd3\x88\x4d\x2c\xc1\x2a\x2c\xe5\x06\x3d\xef\xde\xe1\xd3\xa3\x58\xfa\x47\xf0\xd7\x3f\xf7\x2d\x83\x1f\x7e\xc2\x5d\xd7\xf3\x7f\xb9\x77\x00\x00\x00\xff\xff\xe9\x60\xa2\xe7\xc4\x00\x00\x00")

func interfacesUniform_resource_locatableGqlBytes() ([]byte, error) {
	return bindataRead(
		_interfacesUniform_resource_locatableGql,
		"interfaces/uniform_resource_locatable.gql",
	)
}

func interfacesUniform_resource_locatableGql() (*asset, error) {
	bytes, err := interfacesUniform_resource_locatableGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "interfaces/uniform_resource_locatable.gql", size: 196, mode: os.FileMode(420), modTime: time.Unix(1523803810, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _interfacesUpdateableGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x41\x0a\xc2\x40\x10\x44\xd1\x7d\x9f\xa2\x24\xfb\x1c\xc0\xa5\xc1\x23\x78\x80\x9e\x49\xc9\xb4\x84\x1e\x49\x4a\x5d\x88\x77\x17\x34\xdb\xff\x79\x03\xce\xa9\x50\x70\x83\x9a\x0b\xd5\x13\x85\x78\xdc\x67\x17\xe7\xd1\x22\xc5\xf5\xea\x95\xb8\xfc\x92\x97\x85\x78\x1b\x30\x60\xf2\x84\x1a\xf1\x0c\xbe\xb8\xee\x04\x6a\xb1\xa1\x97\x1b\xab\x46\xc3\x3e\x27\xcf\x3f\x3f\xe2\xd4\xfb\x42\xcf\x83\x7d\xec\x1b\x00\x00\xff\xff\x9b\x38\x05\xaa\x7c\x00\x00\x00")

func interfacesUpdateableGqlBytes() ([]byte, error) {
	return bindataRead(
		_interfacesUpdateableGql,
		"interfaces/updateable.gql",
	)
}

func interfacesUpdateableGql() (*asset, error) {
	bytes, err := interfacesUpdateableGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "interfaces/updateable.gql", size: 124, mode: os.FileMode(420), modTime: time.Unix(1525789514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scalarsHtmlGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x70\x54\x28\x2e\x29\xca\xcc\x4b\x57\x48\xce\xcf\x2b\x49\xcc\xcc\x03\x31\x3d\x42\x7c\x7d\x14\x92\xf3\x53\x52\xf5\xb8\x8a\x93\x13\x73\x12\x8b\xc0\x22\x5c\x80\x00\x00\x00\xff\xff\x69\x83\x95\x22\x2d\x00\x00\x00")

func scalarsHtmlGqlBytes() ([]byte, error) {
	return bindataRead(
		_scalarsHtmlGql,
		"scalars/html.gql",
	)
}

func scalarsHtmlGql() (*asset, error) {
	bytes, err := scalarsHtmlGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scalars/html.gql", size: 45, mode: os.FileMode(420), modTime: time.Unix(1523745255, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scalarsTimeGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x08\xc9\xcc\x4d\x55\xc8\x2c\x56\x48\xcc\x53\x08\x72\x73\x36\x36\x36\xb6\x54\x28\xc9\xcc\x4d\x2d\x2e\x49\xcc\x2d\xd0\xe3\x2a\x4e\x4e\xcc\x49\x2c\x02\x2b\xe2\x02\x04\x00\x00\xff\xff\x3c\x59\x30\xf9\x2c\x00\x00\x00")

func scalarsTimeGqlBytes() ([]byte, error) {
	return bindataRead(
		_scalarsTimeGql,
		"scalars/time.gql",
	)
}

func scalarsTimeGql() (*asset, error) {
	bytes, err := scalarsTimeGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scalars/time.gql", size: 44, mode: os.FileMode(420), modTime: time.Unix(1523805330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scalarsUriGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x70\xcc\x53\x08\x72\x73\x56\x30\xb6\xb4\x30\xd3\x81\xb1\xcc\x75\x14\x12\xf3\x52\xc0\x3c\x33\x53\x73\x03\x05\x8d\x9c\xd4\xb2\xd4\x1c\x05\x13\x4d\x85\xe4\xfc\xdc\x82\x9c\xcc\xc4\xbc\x12\x85\xd0\x20\x4f\x85\xe2\x92\xa2\xcc\xbc\x74\x3d\xae\xe2\xe4\xc4\x9c\xc4\x22\x90\x10\x17\x20\x00\x00\xff\xff\x12\xa3\x29\x58\x51\x00\x00\x00")

func scalarsUriGqlBytes() ([]byte, error) {
	return bindataRead(
		_scalarsUriGql,
		"scalars/uri.gql",
	)
}

func scalarsUriGql() (*asset, error) {
	bytes, err := scalarsUriGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scalars/uri.gql", size: 81, mode: os.FileMode(420), modTime: time.Unix(1523745591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xbd\x8e\xdb\x30\x0c\xde\xf5\x14\x9f\xd1\x25\x59\xf2\x00\x1e\x5b\x2d\x06\xae\x05\x8a\x36\xd3\xe1\x06\x35\xe2\x25\x42\x1d\x29\xd5\xcf\x1d\x8c\xa2\xef\x5e\x90\x76\x6c\xd9\x01\x6e\x4a\xf8\x91\xdf\x8f\x45\xa6\xd3\x85\xae\x06\x7f\x15\xf0\xa7\x50\x1c\x5a\x7c\xe7\x1f\x05\x5c\x4b\x36\xd9\x05\xdf\xe2\xeb\xf4\x4f\xfd\x53\x79\xb8\xd1\x38\x21\x94\x4f\x78\x0a\xe1\x77\xb9\xc1\x07\x4b\xf8\x35\xa0\xd3\x07\x05\xa9\x76\x0a\xe0\x81\x9f\x17\x42\xa7\x11\x5e\x91\x2f\x24\x9d\x83\x74\x9c\x6d\xd1\xe9\x46\x01\xfb\x16\xdf\x82\x25\xb5\xd5\x4b\x2c\x68\xd0\xbb\x94\x99\xde\xe9\x74\xd7\x4e\xb5\xf8\xa6\xcf\xca\xa9\xc5\x73\xa7\x9b\x97\x49\xfd\x99\xe5\x5f\x9a\x95\x81\xc1\xd9\xbd\x91\x47\xca\xc5\x0e\x6c\xc4\xe9\xc2\xbb\xa7\x08\xe3\xed\x04\x7b\x73\x95\xb4\x52\xd5\x9e\xdc\xb8\x7f\x92\x34\x47\x67\x86\x5b\xfc\xc8\xd1\xf9\x73\x53\x47\x0c\x67\xe7\xf1\xea\xa8\xb7\xcc\x32\x28\x89\xe2\x48\x11\xcb\x9a\xb3\xe7\xa2\xd8\x61\x93\x96\x19\x1c\x53\xa4\x0e\x50\x10\x64\xf7\x60\x32\x85\x5a\x0c\x04\xde\x18\x1c\x13\xc5\x51\x9f\x89\xa7\x12\x23\xf9\xdc\x0f\x30\x25\x5f\xc8\x67\x77\x32\x99\xec\xac\xf1\xe6\xe8\x9d\x33\x32\xab\xb9\xdf\xc0\xfd\x26\xe4\x0c\x4e\x91\x4c\xa6\x27\x4a\x29\xf8\x9d\xf3\xb7\x92\x5b\x7c\xa9\xb0\x8e\xa1\x66\xdf\x62\x2c\xc5\xd9\x52\x4f\x5b\x8e\xae\xb0\x99\xf3\x39\x84\x9e\x8c\x6f\x84\x55\x6e\xf6\xc1\xe9\x58\x61\x1b\xa7\x66\x0e\x27\x6f\xba\xce\x26\xd0\x4c\x18\x1f\x7d\x49\xb6\x22\xe8\x05\xfa\x28\xd7\x8a\x73\x5c\xa0\xb5\xc9\x12\x8a\x5f\x74\x9d\x89\x91\x79\x5a\xd6\x84\x29\x4f\x3d\xab\x67\xa4\x52\xe6\xfd\xf2\x59\x88\x6d\x3d\x7d\x9c\x91\x95\x32\xaf\xf2\x7f\x00\x00\x00\xff\xff\x6b\x6f\x7b\x20\xfe\x03\x00\x00")

func schemaGqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGql,
		"schema.gql",
	)
}

func schemaGql() (*asset, error) {
	bytes, err := schemaGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.gql", size: 1022, mode: os.FileMode(420), modTime: time.Unix(1525806984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeLessonGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x8e\xda\x30\x10\xbd\xe7\x2b\x5e\xc5\xb5\xea\x07\xe4\x46\x61\xa5\x45\xa2\x15\xa2\x70\xaa\xf6\x60\xe2\x81\x4c\x95\xd8\x91\x3d\x29\x42\xd5\xfe\x7b\x35\x8e\x81\x94\xa0\x3d\xf4\x36\x9e\xbc\xf7\xe6\xcd\x78\x9c\x19\xb6\xd4\x05\x8a\xe4\x24\xc2\xa0\xa1\x18\xbd\xfb\x52\xc8\xa5\x23\xac\xd3\x01\xdc\x76\x0d\xb5\x09\xf0\xdd\x5b\xfa\x8c\xbd\xe3\xa3\x0f\xed\x96\xa2\xef\x43\x45\x6b\x5f\x19\x31\x87\x46\xbf\x74\xd6\x08\x69\x8c\x3f\x05\x30\xc3\xae\x26\x98\x5e\x6a\x1f\xe0\x8f\x90\x9a\x6e\x15\x90\xf3\x25\xf6\x91\x42\x71\x43\x1f\xbc\xbd\x4c\xb1\x9a\x2d\xf1\x43\x02\xbb\xd3\xa7\x8f\xc0\x08\xe4\x2c\x05\xb2\x10\x8f\xd7\xdd\xb7\xf5\x95\xad\x71\x99\x32\x99\xbf\xb2\xe4\x84\x8f\x4c\x31\xd1\xd5\x38\x8c\xb3\x10\x6e\x09\xe7\x9a\x5c\x4a\xfb\xc3\x2f\xaa\x04\x67\x13\x51\x05\x32\x42\x56\x05\x73\x38\x97\x12\x3b\x6e\x29\x29\xb2\x2d\xb1\x5a\xfe\xaf\x78\x63\xa2\x80\x2c\xe7\x02\x7a\x7c\x49\xa7\x7f\x6a\x4c\x84\x73\xd3\xae\x6f\x0f\x14\x94\x38\x44\x25\x56\x4e\xa6\x8c\x5b\xe1\x4c\xd3\xc2\x5d\x7f\x68\x38\xd6\x64\x61\x44\x05\x6e\xe7\x87\xc2\x3a\xee\x28\xbd\xbd\xc0\xc4\xe8\x2b\xd6\xfe\x71\x66\xa9\x21\x35\xc7\xd1\x55\x25\x90\xde\x55\x6f\x2f\x23\xae\xb0\x34\x34\xbd\xd8\x94\x7e\x72\xb3\xaf\xbb\xdd\x06\x9d\x91\x1a\x47\x1f\x1e\x4b\x84\xbc\x79\x1b\x23\x75\x89\xfd\x76\xf5\x48\xdc\x6f\xd7\xcf\x78\x7d\x68\xc6\xf0\x85\x19\xa6\xf1\x9b\xe9\x4c\x01\x7d\x5a\xde\x47\xce\xf0\x71\x61\xdc\xb0\xdb\x25\xbe\x7a\xdf\x90\x71\x59\x63\xc9\x76\xac\x91\x77\xfd\xa9\xc6\x92\xed\x3c\xaf\xfc\x4d\xe3\xbd\x28\x66\x98\x3b\x90\x3d\x11\xd2\xa3\x53\xdb\xeb\xe9\x2b\x7c\x51\xc0\xe8\x25\xa6\xf3\xf0\xc6\xe6\xa8\xfa\x10\x7d\x48\xd4\x3e\x12\xd8\xa1\x33\x27\x76\x46\x78\xa8\x3f\x7c\x7f\x32\x65\x16\x6a\x61\x24\x75\x40\xce\x5e\xaf\x47\xdd\xa4\x65\xf2\x96\xca\x6c\x20\x5b\x45\xe5\x9d\xa3\x4a\x95\x3f\xf4\xbb\xb8\xc3\x46\xae\x47\xd9\xc1\xfb\xca\xe9\x9f\xc4\x0c\x72\x1e\x86\xed\xd4\x7d\x67\x4e\xa4\xb8\x12\x9b\x1c\xe5\x0e\xe6\x68\x38\x8a\x9a\x56\xc3\x51\xb1\x29\x28\xf1\xf3\x3e\xb4\xb7\x47\xac\x36\x15\xaf\xdd\xdd\xb1\x6f\xa3\x55\xf5\x62\x1a\x54\xbe\x77\x89\xa0\x43\x8a\x6a\x4b\x47\x73\x6f\x3f\x6d\xaf\x22\x17\x0a\xcc\x2f\xee\xbd\xf8\x1b\x00\x00\xff\xff\xd8\xa6\xd8\x6b\x51\x05\x00\x00")

func typeLessonGqlBytes() ([]byte, error) {
	return bindataRead(
		_typeLessonGql,
		"type/lesson.gql",
	)
}

func typeLessonGql() (*asset, error) {
	bytes, err := typeLessonGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/lesson.gql", size: 1361, mode: os.FileMode(420), modTime: time.Unix(1525964721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typePage_infoGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xcd\x4a\xc5\x40\x0c\x05\xe0\xfd\x3c\xc5\x91\x6e\xa5\x0f\xd0\x8d\xa0\x2b\x37\x52\x70\xe1\x3a\x9d\xa6\xd3\x41\x9b\x94\x4c\xc6\x1f\xc4\x77\x97\x51\x70\x21\xf7\x52\xee\x32\x09\xe7\x23\xa7\xc3\xbd\x2c\x6a\x1b\x79\x56\x01\x4d\x5a\x1d\x3b\xa5\x2c\xbf\x8b\x2c\x20\x44\x15\xe1\xd8\xe6\x3e\xf8\xc7\xce\x18\x29\x71\x8b\xe1\x33\x00\x1d\x9e\x56\x96\xbf\x90\x24\x2c\x6a\x6f\x64\x73\xb9\x86\xaf\x8c\x58\xad\xa8\xc1\xb5\x39\x9e\xa5\x72\x1f\x00\x96\xf9\xee\xe7\x30\xe0\xd1\x2d\x4b\x0a\x07\x14\x19\x37\xce\x18\x9b\x1a\x23\x3b\x6f\xe5\x26\x00\x2b\x95\x07\x7e\xf7\xf6\xd2\x80\x5b\xd5\x17\x26\xb9\x3a\x8d\x4d\x14\x9f\x8f\xb5\xd1\xf8\x35\x6b\x2d\x17\x8a\xe7\xab\x16\x27\xf3\x7f\x65\xbf\xc2\x77\x00\x00\x00\xff\xff\xc0\xbd\xde\x84\x79\x01\x00\x00")

func typePage_infoGqlBytes() ([]byte, error) {
	return bindataRead(
		_typePage_infoGql,
		"type/page_info.gql",
	)
}

func typePage_infoGql() (*asset, error) {
	bytes, err := typePage_infoGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/page_info.gql", size: 377, mode: os.FileMode(420), modTime: time.Unix(1525875526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeStudyGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x41\x6e\xdb\x30\x10\xbc\xeb\x15\x13\xe4\xd0\x16\x28\xf2\x00\xdd\xda\xe4\x10\x03\x6e\x13\x38\x36\x7a\xa6\xc4\x55\xc4\x42\x22\x85\xe5\x0a\x86\x51\xf4\xef\x05\x97\x92\xa2\x26\x4e\x9a\xde\x64\x72\x76\x66\xcc\xd9\xdd\x4b\xec\x68\x60\x8a\xe4\x25\xc2\x20\xca\x68\x4f\x57\x85\x9c\x06\xc2\x43\xfa\x86\xeb\x87\x8e\x7a\xbd\xfe\x1e\x2c\x7d\xc6\xc1\xbb\x26\x70\xbf\xa3\x18\x46\xae\x69\x1b\x6a\x23\xa6\xea\x08\xbf\x0a\xe0\x12\x1b\x4b\x5e\x5c\xe3\x28\x42\x5a\x82\x35\x42\x30\xde\x42\x5c\x4f\x38\xb6\xe4\xf5\x38\x54\x3f\xa9\x16\x1c\x4d\x44\xcd\x64\x84\xec\x55\x81\xf9\xf3\x8b\x94\xd8\xbb\x9e\x2e\x0a\x65\xdc\x27\x1a\x8a\x35\xbb\x41\x5c\xf0\x08\x8d\x52\x4c\x56\xb1\xbe\x2b\xf1\x20\xec\xfc\xe3\x3b\x2a\xc1\xe4\x2d\x31\x59\x48\xc0\xed\xfe\xdb\xf6\x19\x55\x3a\x2a\xf5\x42\xc9\x9c\x2d\xb1\xb9\x99\x78\x77\x24\x23\x7b\x7d\x2f\xe7\x1f\x3b\x42\x47\x31\x06\x8f\x86\x43\xaf\x0a\xf5\xc8\x4c\x5e\x26\xa5\xea\x04\x3f\xf6\x15\x71\x92\xc8\xd0\x8f\x05\x30\x3b\xcc\x77\x68\x02\x6b\xed\xc4\x25\x01\x15\x81\x55\x29\xbf\x0e\x26\x64\x89\x8d\x97\x0b\xa0\x00\x3e\x95\xd8\x2a\xfc\xb9\xaf\xce\x45\x49\x7f\x37\x93\xc5\x57\x9c\x3d\xf9\x89\xb3\xa1\x99\x22\x61\x69\x0e\xde\xe5\xd0\x94\x54\x5a\x23\xa8\x43\x4f\x30\x8d\x50\xb6\x1c\x07\xaa\x53\xe4\x16\x8f\x5d\xa8\x4c\x87\xcd\x4d\x36\xac\x90\x39\x94\xe2\xff\x25\x2a\x6a\x02\xd3\xdb\x1a\x19\xf3\x96\x48\xe3\x38\x0a\xfc\x93\x58\xea\xdf\x45\x2e\xb3\x28\x46\x5f\xf6\x1c\x43\x67\xfe\x49\x90\x20\x7f\xd5\xdf\xb1\xa5\xe4\x08\x41\xfb\x49\x8b\x96\x3c\xe6\x5c\x57\xc1\x04\xef\xa9\x4e\xc8\xcc\x17\x52\xf9\xd7\xd3\x1c\xb0\xb2\xad\x13\xbf\x5e\xf0\x53\x53\xde\x86\x23\x7a\xe3\x4f\x8b\x86\xb4\xc4\x04\xc3\x94\x1f\xd7\xc5\xe7\xa1\x5f\x87\xd1\x67\xcf\xab\x79\xf1\xa6\xa7\x17\x23\x96\x0e\xcf\xcc\x96\xde\x7f\x88\xb9\xe6\xe8\xa4\x45\x38\xfa\xdc\xe6\xe9\xe8\x87\x93\xf6\x2e\x1d\x9c\x29\x55\xe0\x0b\x9d\x90\xd1\x87\x48\x3c\x61\x57\xeb\x64\x59\x1e\x79\xaa\xd2\xee\x18\xc6\xaa\x73\xb1\x25\x0b\xa3\x31\x2c\xbf\xcf\xac\x90\xdb\xfd\xfe\x1e\x83\x91\x76\x9a\xb4\xf5\x7b\xf0\xb4\xcc\xee\x8d\xb4\x25\x0e\xbb\xcd\xbb\xd4\xb5\x2b\xc6\xc1\xce\xeb\x6b\xfa\x7c\x4d\xfb\xb0\xdb\x9e\x91\x1e\xb9\x9b\x14\x7f\x17\x7f\x02\x00\x00\xff\xff\xb3\x79\x7d\xf7\x8d\x05\x00\x00")

func typeStudyGqlBytes() ([]byte, error) {
	return bindataRead(
		_typeStudyGql,
		"type/study.gql",
	)
}

func typeStudyGql() (*asset, error) {
	bytes, err := typeStudyGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/study.gql", size: 1421, mode: os.FileMode(420), modTime: time.Unix(1525964471, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeUserGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4f\x8b\xd4\x40\x10\xc5\xef\xf9\x14\x4f\xf6\xe0\x45\xf6\x03\xe4\xb6\xe2\x61\x07\x46\x59\xb2\x89\x9e\x3b\xe9\xca\x74\x49\xff\x09\xd5\x15\x83\x88\xdf\x5d\xba\xe9\x45\xd4\x85\x19\x3c\xd5\xa3\xc2\xfb\xf1\x2a\xaf\xef\x30\xd0\x26\x94\x29\x6a\x86\xc1\x9e\x49\xee\x3b\xfd\xbe\x11\xa6\x4c\x02\x0e\x9b\xa7\x50\x3f\x7e\x4a\x96\xde\x61\x8a\xbc\x26\x09\x03\xe5\xb4\xcb\x42\xe7\xb4\x18\x35\xb3\x27\xfc\xe8\x80\x3b\x8c\x8e\x2a\xe3\x6d\xc6\xb6\xcf\x9e\x17\x6c\x92\x56\xf6\x84\x99\xd3\x7d\x87\x32\x7a\x3c\xab\x70\xbc\xbc\xe9\xae\x5b\x60\x32\x1e\xc7\x8f\xe7\x66\x2d\xb2\xaf\x8b\x66\x3e\x59\x8a\xca\x2b\x53\x86\x3a\x82\x35\x4a\x30\xd1\x42\x39\x10\x0e\x47\xb1\xae\xd3\xfc\x95\x16\xc5\x61\x32\x16\x21\xa3\x64\x0b\xaf\xc9\x07\xed\x31\x72\xa0\xab\x71\x28\x18\xf6\xc5\x58\xc5\x1f\x57\xb0\xed\x71\xfa\xd0\x08\x5f\x1c\xa9\x23\x41\x12\xc4\xa4\x50\xc7\xb9\x12\xc1\xe5\x0f\x67\x2e\x11\x6d\xe0\xc8\x59\xc5\x68\x92\x82\xe4\xfc\xcc\x4a\x0f\x65\xdd\xe3\x7d\x4a\x9e\x4c\xbc\x01\x57\x8e\xfb\xc6\x74\x70\xbc\xb4\xea\x0a\xea\x33\xd3\x41\xf2\x37\xe7\xe5\xb0\x68\x42\x15\x16\x9a\xe0\xd3\x85\x63\x71\x55\x71\x73\x33\x85\x51\x5c\x65\xbe\x62\x7a\x1c\xc7\x27\x6c\x46\x1d\xd6\x24\xbf\x13\x17\x87\xb4\x87\xf3\x64\xd4\xf5\x98\x86\xd3\xff\x16\xe9\x4d\x56\xec\x9b\x7d\x69\xb3\xc9\x57\xda\xac\x69\xa6\xe1\xfc\x6f\x98\x5d\x7c\xcb\xf0\xb3\xfb\x15\x00\x00\xff\xff\x8a\xcc\xcf\x55\x09\x03\x00\x00")

func typeUserGqlBytes() ([]byte, error) {
	return bindataRead(
		_typeUserGql,
		"type/user.gql",
	)
}

func typeUserGql() (*asset, error) {
	bytes, err := typeUserGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/user.gql", size: 777, mode: os.FileMode(420), modTime: time.Unix(1525462513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enums/lesson_order_field.gql": enumsLesson_order_fieldGql,
	"enums/order_direction.gql": enumsOrder_directionGql,
	"enums/study_order_field.gql": enumsStudy_order_fieldGql,
	"input/createLesson.gql": inputCreatelessonGql,
	"input/createStudy.gql": inputCreatestudyGql,
	"input/createUser.gql": inputCreateuserGql,
	"input/deleteLesson.gql": inputDeletelessonGql,
	"input/deleteStudy.gql": inputDeletestudyGql,
	"input/deleteUser.gql": inputDeleteuserGql,
	"input/lesson_order.gql": inputLesson_orderGql,
	"input/updateLesson.gql": inputUpdatelessonGql,
	"input/updateStudy.gql": inputUpdatestudyGql,
	"input/updateUser.gql": inputUpdateuserGql,
	"interfaces/connection.gql": interfacesConnectionGql,
	"interfaces/deletable.gql": interfacesDeletableGql,
	"interfaces/edge.gql": interfacesEdgeGql,
	"interfaces/node.gql": interfacesNodeGql,
	"interfaces/study_node.gql": interfacesStudy_nodeGql,
	"interfaces/uniform_resource_locatable.gql": interfacesUniform_resource_locatableGql,
	"interfaces/updateable.gql": interfacesUpdateableGql,
	"scalars/html.gql": scalarsHtmlGql,
	"scalars/time.gql": scalarsTimeGql,
	"scalars/uri.gql": scalarsUriGql,
	"schema.gql": schemaGql,
	"type/lesson.gql": typeLessonGql,
	"type/page_info.gql": typePage_infoGql,
	"type/study.gql": typeStudyGql,
	"type/user.gql": typeUserGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enums": &bintree{nil, map[string]*bintree{
		"lesson_order_field.gql": &bintree{enumsLesson_order_fieldGql, map[string]*bintree{}},
		"order_direction.gql": &bintree{enumsOrder_directionGql, map[string]*bintree{}},
		"study_order_field.gql": &bintree{enumsStudy_order_fieldGql, map[string]*bintree{}},
	}},
	"input": &bintree{nil, map[string]*bintree{
		"createLesson.gql": &bintree{inputCreatelessonGql, map[string]*bintree{}},
		"createStudy.gql": &bintree{inputCreatestudyGql, map[string]*bintree{}},
		"createUser.gql": &bintree{inputCreateuserGql, map[string]*bintree{}},
		"deleteLesson.gql": &bintree{inputDeletelessonGql, map[string]*bintree{}},
		"deleteStudy.gql": &bintree{inputDeletestudyGql, map[string]*bintree{}},
		"deleteUser.gql": &bintree{inputDeleteuserGql, map[string]*bintree{}},
		"lesson_order.gql": &bintree{inputLesson_orderGql, map[string]*bintree{}},
		"updateLesson.gql": &bintree{inputUpdatelessonGql, map[string]*bintree{}},
		"updateStudy.gql": &bintree{inputUpdatestudyGql, map[string]*bintree{}},
		"updateUser.gql": &bintree{inputUpdateuserGql, map[string]*bintree{}},
	}},
	"interfaces": &bintree{nil, map[string]*bintree{
		"connection.gql": &bintree{interfacesConnectionGql, map[string]*bintree{}},
		"deletable.gql": &bintree{interfacesDeletableGql, map[string]*bintree{}},
		"edge.gql": &bintree{interfacesEdgeGql, map[string]*bintree{}},
		"node.gql": &bintree{interfacesNodeGql, map[string]*bintree{}},
		"study_node.gql": &bintree{interfacesStudy_nodeGql, map[string]*bintree{}},
		"uniform_resource_locatable.gql": &bintree{interfacesUniform_resource_locatableGql, map[string]*bintree{}},
		"updateable.gql": &bintree{interfacesUpdateableGql, map[string]*bintree{}},
	}},
	"scalars": &bintree{nil, map[string]*bintree{
		"html.gql": &bintree{scalarsHtmlGql, map[string]*bintree{}},
		"time.gql": &bintree{scalarsTimeGql, map[string]*bintree{}},
		"uri.gql": &bintree{scalarsUriGql, map[string]*bintree{}},
	}},
	"schema.gql": &bintree{schemaGql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"lesson.gql": &bintree{typeLessonGql, map[string]*bintree{}},
		"page_info.gql": &bintree{typePage_infoGql, map[string]*bintree{}},
		"study.gql": &bintree{typeStudyGql, map[string]*bintree{}},
		"user.gql": &bintree{typeUserGql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

