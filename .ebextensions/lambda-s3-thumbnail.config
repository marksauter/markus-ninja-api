# vi: ft=yaml

# Resources:
#   ThumbnailFunction:
#     Type: "AWS::Lambda::Function"
#     Properties:
#       Code:
#         S3Bucket:
#           "Fn::Sub": "lambda-${AWS::Region}-markus-ninja"
#         S3Key: "s3-thumbnail.zip"
#       Description: Generate thumbnails for images in s3 bucket.
#       Handler: main
#       Role:
#         "Fn::GetAtt":
#           - ThumbnailFunctionRole
#           - Arn
#       Runtime: go1.x
#       Timeout: 300
#       Tags:
#         - Key: "application"
#           Value: "markus-ninja"
#
#
#   ThumbnailFunctionRole:
#     Type: "AWS::IAM::Role"
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service:
#                 - "lambda.amazonaws.com"
#             Action:
#               - "sts:AssumeRole"
#       ManagedPolicyArns:
#         - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
#       Policies:
#         - PolicyName: markus-ninja-s3-thumbnail-policy
#           PolicyDocument:
#             Version: "2012-10-17"
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - "s3:GetObject"
#                   - "s3:PutObject"
#                 Resource:
#                   "Fn::Sub": "arn:aws:s3:::markus-ninja-${AWS::Region}-usercontent/*"
#
#   ThumbnailInvokePermission:
#     Type: "AWS::Lambda::Permission"
#     Properties:
#       FunctionName:
#         "Ref": "ThumbnailFunction"
#       Action: "lambda:InvokeFunction"
#       Principal: s3.amazonaws.com
#       SourceAccount:
#         "Ref": "AWS::AccountId"
#       SourceArn:
#         "Fn::GetAtt":
#           - UserContentBucket
#           - Arn
#
#   UserContentBucket:
#     Type: "AWS::S3::Bucket"
#     Properties:
#       BucketEncryption:
#         ServerSideEncryptionConfiguration:
#           - ServerSideEncryptionByDefault:
#               SSEAlgorithm: "AES256"
#       BucketName:
#         "Fn::Sub": "markus-ninja-${AWS::Region}-usercontent"
#       CorsConfiguration:
#         CorsRules:
#           - AllowedHeaders:
#               - "Authorization"
#             AllowedMethods:
#               - "GET"
#               - "PUT"
#               - "POST"
#               - "HEAD"
#             AllowedOrigins:
#               - "https://api.rkus.ninja"
#               - "http://localhost:5000" # This needs to be removed eventually
#             MaxAge: 3000
#       # NotificationConfiguration:
#       #   LambdaConfigurations:
#       #     - Event: "s3:ObjectCreated:*"
#       #       Filter:
#       #         S3Key:
#       #           Rules:
#       #             - Name: prefix
#       #               Value: "image"
#       #       Function:
#       #         "Fn::GetAtt":
#       #           - ThumbnailFunction
#       #           - Arn
#       # Tags:
#       #   - Key: "application"
#       #     Value: "markus-ninja"
#
#   UserContentBucketPolicy:
#     Type: "AWS::S3::BucketPolicy"
#     Properties:
#       Bucket:
#         "Ref": "UserContentBucket"
#       PolicyDocument:
#         Statement:
#           - Effect: "Allow"
#             Principal:
#               AWS:
#                 "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/aws-elasticbeanstalk-ec2-role"
#             Action:
#               - "s3:DeleteObject"
#               - "s3:GetObject"
#               - "s3:PutObject"
#             Resource:
#               "Fn::Sub": "arn:aws:s3:::${UserContentBucket}/*"
#           - Effect: "Allow"
#             Principal:
#               AWS:
#                 "Fn::GetAtt":
#                   - ThumbnailFunctionRole
#                   - Arn
#             Action:
#               - "s3:GetObject"
#               - "s3:PutObject"
#             Resource:
#               "Fn::Sub": "arn:aws:s3:::${UserContentBucket}/*"
#
# option_settings:
#   aws:elasticbeanstalk:application:environment:
#     USER_CONTENT_BUCKET: '`{"Ref": "UserContentBucket"}`'
